name: Prebuild and publish Node.js Package

on:
  release:
    types: [released]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - uses: ilammy/msvc-dev-cmd@v1
      - run: npm ci
      - run: npm run prebuild:win
      # Prepare Windows release assets
      - name: Prepare Windows release assets
        run: |
          New-Item -ItemType Directory -Path "build/release-assets" -Force
          if (Test-Path "prebuilds/win32-x64/selection-hook.node") {
            Copy-Item -Path "prebuilds/win32-x64/selection-hook.node" -Destination "build/release-assets/selection-hook-win32-x64.node"
          } else {
            Write-Error "x64 binary not found!"
            exit 1
          }
          if (Test-Path "prebuilds/win32-arm64/selection-hook.node") {
            Copy-Item -Path "prebuilds/win32-arm64/selection-hook.node" -Destination "build/release-assets/selection-hook-win32-arm64.node"
          } else {
            Write-Error "arm64 binary not found!"
            exit 1
          }
      # Upload Windows release assets
      - name: Upload Windows Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-assets
          path: build/release-assets/*

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Install Python setuptools
        run: brew install python-setuptools
      - run: npm ci
      - run: npm run prebuild:mac
      # Prepare macOS release assets
      - name: Prepare macOS release assets
        run: |
          mkdir -p build/release-assets
          if [ -f "prebuilds/darwin-x64/selection-hook.node" ]; then
            cp "prebuilds/darwin-x64/selection-hook.node" "build/release-assets/selection-hook-darwin-x64.node"
          else
            echo "x64 binary not found!"
            exit 1
          fi
          if [ -f "prebuilds/darwin-arm64/selection-hook.node" ]; then
            cp "prebuilds/darwin-arm64/selection-hook.node" "build/release-assets/selection-hook-darwin-arm64.node"
          else
            echo "arm64 binary not found!"
            exit 1
          fi

      # Upload macOS release assets
      - name: Upload macOS Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: macos-release-assets
          path: build/release-assets/*

  publish:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - run: npm ci

      # Download all release assets
      - name: Download Windows release assets
        uses: actions/download-artifact@v4
        with:
          name: windows-release-assets
          path: build/release-assets/

      - name: Download macOS release assets
        uses: actions/download-artifact@v4
        with:
          name: macos-release-assets
          path: build/release-assets/

      # Restore prebuilds directory structure for npm publish
      - name: Restore prebuilds for npm publish
        run: |
          # Clean and recreate prebuilds directory to ensure clean state
          rm -rf prebuilds
          mkdir -p prebuilds/win32-x64
          mkdir -p prebuilds/win32-arm64
          mkdir -p prebuilds/darwin-x64
          mkdir -p prebuilds/darwin-arm64

          # Copy Windows binaries back to prebuilds directory
          cp build/release-assets/selection-hook-win32-x64.node prebuilds/win32-x64/selection-hook.node
          cp build/release-assets/selection-hook-win32-arm64.node prebuilds/win32-arm64/selection-hook.node

          # Copy macOS binaries back to prebuilds directory
          cp build/release-assets/selection-hook-darwin-x64.node prebuilds/darwin-x64/selection-hook.node
          cp build/release-assets/selection-hook-darwin-arm64.node prebuilds/darwin-arm64/selection-hook.node

          # Verify all files are in place
          echo "Prebuilds directory contents:"
          ls -la prebuilds/*/
          echo "File sizes:"
          du -h prebuilds/*/*.node

      # Upload all release assets to GitHub release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/release-assets/selection-hook-win32-x64.node
            build/release-assets/selection-hook-win32-arm64.node
            build/release-assets/selection-hook-darwin-x64.node
            build/release-assets/selection-hook-darwin-arm64.node
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      # Publish to NPM with all prebuilds
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}
